#
# Class definition for pipeline widget
#
# This should be included within a pipeline class
#
# Usage: this component can be used by declaring in a parent object. i.e.
#
# 	Object.Widget.pipeline."N" {
#		index		1
#		time_domain	"timer"
#		period		1000
#	}
#
# Where N is the unique instance number for pipeline widget in the same alsaconf node.

Define {
       # If KCPS value for the pipeline is 0 then the driver does not send any
       # KCPS adjustment message to the firmware. This is the default.
       KCPS_PIPELINE_DEFAULT	0
}

Class.Widget."pipeline" {
	# pipeline_id for the pipeline widget
	DefineAttribute."index" {}

	#include common component definition
	<include/components/widget-common.conf>

	#
	# Bespoke Tuples for Pipelines
	#

	# Scheduling period
	DefineAttribute."period" {
		# Token reference and type
		token_ref	"scheduler.word"
		constraints {
			min	333
			max	1000
		}
	}

	# Scheduler time domain. The value provided will be translated to 0/1 based on
	# scheduler_time_domain. For exameple: "timer" will be converted to 0.
	DefineAttribute."time_domain" {
		# Token reference and type
		token_ref	"scheduler.word"
		constraints {
			!valid_values [
				"timer"
				"dma"
			]
			!tuple_values [
				1
				0
			]
		}
	}

	# pipeline priority (0 = highest priority, 7 = lowest)
	DefineAttribute."priority" {
		# Token reference and type
		token_ref	"scheduler.word"
		constraints {
			min	0
			max	7
		}
	}

	# core that the pipeline should be scheduled on
	DefineAttribute."core" {
		# Token reference and type
		token_ref	"scheduler.word"
	}

	# frames per period
	DefineAttribute."frames" {
		# Token reference and type
		token_ref	"scheduler.word"
	}

	# mips requirement for pipeline
	DefineAttribute."mips" {
		# Token reference and type
		token_ref	"scheduler.word"
	}

	# flag to set the pipeline as dynamic
	DefineAttribute."dynamic_pipeline" {
		# Token reference and type
		token_ref	"scheduler.word"
	}

	DefineAttribute."lp_mode" {
		# Token reference and type
		token_ref	"scheduler.word"
		constraints {
			!tuple_values [
				1
				0
			]
		}
	}

	# Skip setting up the pipeline in the DSP in the case of chained DMA mode
	DefineAttribute."use_chain_dma" {
		type	"string"
		token_ref	"scheduler.bool"
		constraints {
			!valid_values [
				"true"
				"false"
			]
		}
	}

	# kcps requirements for the pipeline, default value defined bellow
	DefineAttribute."kcps" {
		# Token reference and type
		token_ref	"scheduler.word"
	}

	attributes {
		# pipeline widget name will be constructed as pipeline.1, pipeline.2 etc
		!constructor [
			"index"
		]
		!mandatory [
			"instance"
		]
		!immutable [
			"type"
		]
		!deprecated [
			"preload_count"
		]
		#
		# pipeline widget objects instantiated within the same alsaconf node must have
		# unique instance attribute
		unique	instance
	}

	# Default attributes for pipeline
	type 		"scheduler"
	no_pm		"true"
	kcps		$KCPS_PIPELINE_DEFAULT
}
