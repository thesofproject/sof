#
# BE playback pipeline: mixout-gain-smart-amp-dai-copier.
#
# All attributes defined herein are namespaced
# by alsatplg to "Object.Pipeline.mixout-gain-smart-amp-dai-copier-playback.N.attribute_name"
#
# Usage: mixout-gain-smart-amp-dai-copier-playback pipeline object can be instantiated as:
#
# Object.Pipeline.mixout-gain-smart-amp-dai-copier-playback."N" {
# 	period		1000
# 	time_domain	"timer"
# }
#
# Where N is the unique pipeline ID within the same alsaconf node.
#

<include/common/input_audio_format.conf>
<include/common/output_audio_format.conf>
<include/components/dai-copier.conf>
<include/components/gain.conf>
<include/components/mixout.conf>
<include/components/pipeline.conf>
<include/components/smart_amp.conf>

Class.Pipeline."mixout-gain-smart-amp-dai-copier-playback" {

	<include/pipelines/pipeline-common.conf>

	attributes {
		!constructor [
			"index"
		]

		!immutable [
			"direction"
		]

		#
		# mixout-gain-smart-amp-dai-copier-playback objects instantiated within the same
		# alsaconf node must have unique instance attribute
		#
		unique	"instance"
	}

	Object.Widget {
		mixout."1" {}
		dai-copier."1" {
			type dai_in
			num_input_audio_formats 1
			num_output_audio_formats 1
			num_input_pins 1

			# copier only supports one format based on mixin/mixout requirements: 32-bit 48KHz 2ch
			Object.Base.input_audio_format [
				{
					in_bit_depth		32
					in_valid_bit_depth	32
				}
			]
			Object.Base.output_audio_format [
				{
					out_bit_depth		32
					out_valid_bit_depth	32
				}
			]
		}
		gain."1" {
			num_input_audio_formats 1
			num_output_audio_formats 1

			# 32-bit 48KHz 2ch
			Object.Base.input_audio_format [
				{
					in_bit_depth		32
					in_valid_bit_depth	32
				}
			]
			Object.Base.output_audio_format [
				{
					out_bit_depth		32
					out_valid_bit_depth	32
				}
			]
		}

		smart_amp."1" {
			num_input_audio_formats 2
			num_output_audio_formats 1
			# 32-bit 48KHz 2ch
			Object.Base.input_audio_format [
				{
					input_pin_index	0
					in_bit_depth		32
					in_valid_bit_depth	32
				}
				{
					input_pin_index	1
					in_bit_depth		32
					in_valid_bit_depth	32
				}
			]
			Object.Base.output_audio_format [
				{
				output_pin_index 0
				out_bit_depth		32
				out_valid_bit_depth	32
				}
			]
		}

		pipeline."1" {
			priority		0
			lp_mode		0
		}
	}

	Object.Base {
		route.1 {
			source mixout.$index.1
			sink	gain.$index.1
		}

		route.2 {
			source	gain.$index.1
			sink	smart_amp.$index.1
		}
	}

	direction	"playback"
	dynamic_pipeline 1
	time_domain	"timer"
}
