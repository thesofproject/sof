<searchdir:include>
<searchdir:include/common>
<searchdir:include/components>
<searchdir:include/dais>
<searchdir:include/pipelines>
<searchdir:include/pipelines/cavs>
<searchdir:platform>
<searchdir:platform/intel>

<vendor-token.conf>
<tokens.conf>
<virtual.conf>
<host-gateway-playback.conf>
<host-gateway-capture.conf>
<data.conf>
<pcm.conf>
<pcm_caps.conf>
<fe_dai.conf>
<intel/hw_config_cardinal_clk.conf>
<manifest.conf>
<route.conf>
<common_definitions.conf>
<pipeline.conf>
<alh.conf>
<dai.conf>
<host.conf>
<input_audio_format.conf>
<output_audio_format.conf>
<alh-dai-copier.conf>
<controls/bytes.conf>
<controls/mixer.conf>

<aria.conf>
<asrc.conf>
<dcblock.conf>
<drc.conf>
<eqiir.conf>
<eqfir.conf>
<gain.conf>
<igo_nr.conf>
<level_multiplier.conf>
<micsel.conf>
<multiband_drc.conf>
<rtnr.conf>
<sound_dose.conf>
<src.conf>
<src_lite.conf>
<tdfb.conf>
<template_comp.conf>

Define {
	PLATFORM			"none"
	SDW_JACK_OUT_STREAM		'SDW0-Playback'
	SDW_JACK_IN_STREAM		'SDW0-Capture'
	SDW_JACK_OUT_BE_ID		0
	SDW_JACK_IN_BE_ID		1
	NUM_SDW_AMP_LINKS		0
	SDW_DMIC			0
	SDW_JACK			true
	PASSTHROUGH			false
	SDW_ANALOG_CAPTURE_CH		2
	SDW_LINK_VALID_BITS		24
	ANALOG_PLAYBACK_PCM		"Jack Out"
	ANALOG_CAPTURE_PCM		"Jack In"
	JACK_RATE			48000
	BENCH_PLAYBACK_HOST_PIPELINE	1
	BENCH_PLAYBACK_DAI_PIPELINE	2
	BENCH_CAPTURE_HOST_PIPELINE	3
	BENCH_CAPTURE_DAI_PIPELINE	4
	BENCH_PLAYBACK_DAI_COPIER	"alh-copier.SDW0-Playback.0"
	BENCH_CAPTURE_DAI_COPIER	"alh-copier.SDW0-Capture.0"
	BENCH_PCM_CHANNELS_MIN		2
	BENCH_PCM_CHANNELS_MAX		2
}

# override defaults with platform-specific config
IncludeByKey.PLATFORM {
	"mtl"	"platform/intel/mtl.conf"
	"lnl"	"platform/intel/lnl.conf"
	"ptl"	"platform/intel/ptl.conf"
}

IncludeByKey.SDW_JACK_OUT_STREAM {
        "Playback-SimpleJack" {
                Define {
                        BENCH_PLAYBACK_DAI_COPIER "alh-copier.Playback-SimpleJack.0"
                        BENCH_CAPTURE_DAI_COPIER "alh-copier.Capture-SimpleJack.0"
                }
        }
}

#
# List of all DAIs
#
Object.Dai.ALH [
	{
		dai_index		0
		id			$SDW_JACK_OUT_BE_ID
		direction		"playback"
		name			$SDW_JACK_OUT_STREAM
		default_hw_conf_id	0
		rate			$JACK_RATE
		channels		2

		Object.Base.hw_config.1 {
			id		0
			name		"ALH2"
		}
	}
	{
		dai_index		10
		id			$SDW_JACK_IN_BE_ID
		direction		"capture"
		name			$SDW_JACK_IN_STREAM
		default_hw_conf_id	0
		rate			$JACK_RATE
		channels		2

		Object.Base.hw_config.1 {
			id		0
			name		"ALH3"
		}
	}
]

Object.PCM.pcm [
	{
		name	"$ANALOG_PLAYBACK_PCM"
		id 0
		direction	"playback"
		Object.Base.fe_dai.1 {
			name	"$ANALOG_PLAYBACK_PCM"
		}

		Object.PCM.pcm_caps.1 {
			name		$ANALOG_PLAYBACK_PCM
			formats		'S16_LE,S24_LE,S32_LE'
			rates		"8000,11025,16000,22050,32000,44100,48000,64000,88200,96000,176400,192000"
			channels_min	$BENCH_PCM_CHANNELS_MIN
			channels_max	$BENCH_PCM_CHANNELS_MAX
		}
	}
	{
		name	"$ANALOG_CAPTURE_PCM"
		id 1
		direction	"capture"
		Object.Base.fe_dai.1 {
			name	"$ANALOG_CAPTURE_PCM"
		}

		Object.PCM.pcm_caps.1 {
			name		$ANALOG_CAPTURE_PCM
			formats		'S16_LE,S24_LE,S32_LE'
			rates		"8000,11025,16000,22050,32000,44100,48000,64000,88200,96000,176400,192000"
			channels_min	$BENCH_PCM_CHANNELS_MIN
			channels_max	$BENCH_PCM_CHANNELS_MAX
		}
	}
]

Object.Widget {
	alh-copier [
		{
			stream_name				$SDW_JACK_OUT_STREAM
			node_type				$ALH_LINK_OUTPUT_CLASS
			index					$BENCH_PLAYBACK_DAI_PIPELINE
			type					dai_in
			direction				playback
			num_input_pins				1
			num_input_audio_formats			1
			num_output_audio_formats 1
			IncludeByKey.BENCH_MODULE_FORMAT {
				"s16" {
					Object.Base.input_audio_format [
						{
							in_rate			$JACK_RATE
							in_bit_depth            16
							in_valid_bit_depth      16
						}
					]
				}
				"s24" {
					Object.Base.input_audio_format [
						{
							in_rate			$JACK_RATE
							in_bit_depth            32
							in_valid_bit_depth      24
						}
					]
				}
				"s32" {
					Object.Base.input_audio_format [
						{
							in_rate			$JACK_RATE
							in_bit_depth            32
							in_valid_bit_depth      32
						}
					]
				}
			}
			Object.Base.output_audio_format [
				{
					out_rate		$JACK_RATE
					out_bit_depth           32
					out_valid_bit_depth     $SDW_LINK_VALID_BITS
					out_sample_type		$SAMPLE_TYPE_MSB_INTEGER
					out_fmt_cfg		"$[($out_channels | ($out_valid_bit_depth * 256))]"
				}
			]
		}
	]
	pipeline [
		{
			index			$BENCH_PLAYBACK_DAI_PIPELINE
			priority		0
			lp_mode			0
			dynamic_pipeline	1
		}
	]
}

Object.Widget {
	alh-copier [
		{
			stream_name				$SDW_JACK_IN_STREAM
			direction				"capture"
			type					"dai_out"
			index					$BENCH_CAPTURE_DAI_PIPELINE
			node_type				$ALH_LINK_INPUT_CLASS
			num_input_audio_formats			1
			num_output_audio_formats		1
			num_output_pins				1

			Object.Base.input_audio_format [
				{
					in_rate			$JACK_RATE
					in_bit_depth		32
					in_valid_bit_depth	$SDW_LINK_VALID_BITS
					in_sample_type		$SAMPLE_TYPE_MSB_INTEGER
					in_fmt_cfg		"$[($in_channels | ($in_valid_bit_depth * 256))]"
				}
			]
			IncludeByKey.BENCH_MODULE_FORMAT {
				"s16" {
					Object.Base.output_audio_format [
						{
							out_rate		$JACK_RATE
							out_bit_depth		16
							out_valid_bit_depth	16
						}
					]
				}
				"s24" {
					Object.Base.output_audio_format [
						{
							out_rate		$JACK_RATE
							out_bit_depth		32
							out_valid_bit_depth	24
						}
					]
				}
				"s32" {
					Object.Base.output_audio_format [
						{
							out_rate		$JACK_RATE
							out_bit_depth		32
							out_valid_bit_depth	32
						}
					]
				}
			}
		}
	]

	pipeline [
		{
			index			$BENCH_CAPTURE_DAI_PIPELINE
			priority		0
			lp_mode			0
			dynamic_pipeline	1
		}
	]
}

IncludeByKey.BENCH_CONFIG {
	#
	# Aria component
	#

	"aria24" {
		<include/bench/aria_s24.conf>
	}

	#
	# ASRC component
	#

	# '^' indicates the start of the string and '$' means the end of string
	# manually adding '^' and '$' for whole string precise matching

	"^asrc16$" {
		<include/bench/asrc_s16.conf>
	}

	"^asrc24$" {
		<include/bench/asrc_s24.conf>
	}

	"^asrc32$" {
		<include/bench/asrc_s32.conf>
	}

	#
	# DCblock component
	#

	"dcblock16" {
		<include/bench/dcblock_s16.conf>
	}

	"dcblock24" {
		<include/bench/dcblock_s24.conf>
	}

	"dcblock32" {
		<include/bench/dcblock_s32.conf>
	}

	#
	# DRC component
	#

	"drc16" {
		<include/bench/drc_s16.conf>
	}

	"drc24" {
		<include/bench/drc_s24.conf>
	}

	"drc32" {
		<include/bench/drc_s32.conf>
	}

	# Multiband-DRC component
	# Note: Due to alsatplg regexp match feature in IncludeByKey call it e.g. drc_multiband16
	# to not match multiband_drc16 with drc16 and get error "No variable defined
	# for BENCH_DRC_PARAMS" when building these.

	"drc_multiband16" {
		<include/bench/multiband_drc_s16.conf>
	}

	"drc_multiband24" {
		<include/bench/multiband_drc_s24.conf>
	}

	"drc_multiband32" {
		<include/bench/multiband_drc_s32.conf>
	}

	#
	# EQFIR component
	#

	"eqfir16" {
		<include/bench/eqfir_s16.conf>
	}

	"eqfir24" {
		<include/bench/eqfir_s24.conf>
	}

	"eqfir32" {
		<include/bench/eqfir_s32.conf>
	}

	#
	# EQIIR component
	#

	"eqiir16" {
		<include/bench/eqiir_s16.conf>
	}

	"eqiir24" {
		<include/bench/eqiir_s24.conf>
	}

	"eqiir32" {
		<include/bench/eqiir_s32.conf>
	}

	#
	# Gain component
	#

	"gain16" {
		<include/bench/gain_s16.conf>
	}

	"gain24" {
		<include/bench/gain_s24.conf>
	}

	"gain32" {
		<include/bench/gain_s32.conf>
	}

	#
	# IGO NR component
	#

	"igo_nr16" {
		<include/bench/igo_nr_s16.conf>
	}

	"igo_nr24" {
		<include/bench/igo_nr_s24.conf>
	}

	"igo_nr32" {
		<include/bench/igo_nr_s32.conf>
	}

	#
	# Level Multiplier component
	#

	"level_multiplier16" {
		<include/bench/level_multiplier_s16.conf>
	}

	"level_multiplier24" {
		<include/bench/level_multiplier_s24.conf>
	}

	"level_multiplier32" {
		<include/bench/level_multiplier_s32.conf>
	}

	#
	# Micsel component
	#

	"^micsel16$" {
		<include/bench/micsel_s16.conf>
	}

	"^micsel24$" {
		<include/bench/micsel_s24.conf>
	}

	"^micsel32$" {
		<include/bench/micsel_s32.conf>
	}

	"^micsel_multich32$" {
		<include/bench/micsel_multich_s32.conf>
	}

	#
	# RTNR component
	#

	"rtnr16" {
		<include/bench/rtnr_s16.conf>
	}

	"rtnr24" {
		<include/bench/rtnr_s24.conf>
	}

	"rtnr32" {
		<include/bench/rtnr_s32.conf>
	}

	#
	# Sound Dose component
	#

	"sound_dose16" {
		<include/bench/sound_dose_s16.conf>
	}

	"sound_dose24" {
		<include/bench/sound_dose_s24.conf>
	}

	"sound_dose32" {
		<include/bench/sound_dose_s32.conf>
	}

	#
	# SRC component
	#

	"^src16$" {
		<include/bench/src_s16.conf>
	}

	"^src24$" {
		<include/bench/src_s24.conf>
	}

	"^src32$" {
		<include/bench/src_s32.conf>
	}

	#
	# src_lite component
	#

	"src_lite16" {
		<include/bench/src_lite_s16.conf>
	}

	"src_lite24" {
		<include/bench/src_lite_s24.conf>
	}

	"src_lite32" {
		<include/bench/src_lite_s32.conf>
	}

	#
	# tdfb component
	#

	"tdfb16" {
		<include/bench/tdfb_s16.conf>
	}

	"tdfb24" {
		<include/bench/tdfb_s24.conf>
	}

	"tdfb32" {
		<include/bench/tdfb_s32.conf>
	}

	#
	# template_comp component
	#

	"template_comp16" {
		<include/bench/template_comp_s16.conf>
	}

	"template_comp24" {
		<include/bench/template_comp_s24.conf>
	}

	"template_comp32" {
		<include/bench/template_comp_s32.conf>
	}
}