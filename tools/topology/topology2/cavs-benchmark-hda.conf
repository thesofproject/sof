<include/components/dcblock.conf>
<include/components/rtnr.conf>
<include/components/igo_nr.conf>
<include/components/src_lite.conf>
<include/components/asrc.conf>
<include/components/tdfb.conf>
<include/components/template_comp.conf>
<include/components/up_down_mixer.conf>

Define {
	ANALOG_PLAYBACK_PCM		'Analog Playback'
	ANALOG_CAPTURE_PCM		'Analog Capture'
	HDA_ANALOG_DAI_NAME		'Analog'
	HDA_ANALOG_CAPTURE_RATE		48000
	HDA_ANALOG_PLAYBACK_RATE	48000
}

Object.Dai.HDA [
	{
		name $HDA_ANALOG_DAI_NAME
		dai_index 0
		id 4
		default_hw_conf_id 4
		Object.Base.hw_config.1 {
			name	"HDA0"
		}
		direction duplex
	}
]

Object.PCM.pcm [
	{
		id 0
		name 'HDA Analog'
		Object.Base.fe_dai.1 {
			name "HDA Analog"
		}
		Object.PCM.pcm_caps.1 {
			direction	"playback"
			name $ANALOG_PLAYBACK_PCM
			formats 'S32_LE,S24_LE,S16_LE'
			rates "8000,11025,16000,22050,32000,44100,48000,64000,88200,96000,176400,192000"
		}
		Object.PCM.pcm_caps.2 {
			direction	"capture"
			name $ANALOG_CAPTURE_PCM
			formats 'S32_LE,S24_LE,S16_LE'
			rates "8000,11025,16000,22050,32000,44100,48000,64000,88200,96000,176400,192000"
		}
		direction duplex
	}
]

IncludeByKey.BENCH_CONFIG {
	"benchmark" {
		Object.Pipeline {
			mixout-dai-copier-playback [
				{
					index 3

					Object.Widget.mixout.1 {
						num_input_audio_formats 1
						num_output_audio_formats 1
						Object.Base.input_audio_format [
							{
								in_rate			$HDA_ANALOG_PLAYBACK_RATE
								in_bit_depth		32
								in_valid_bit_depth	24
							}
						]
						Object.Base.output_audio_format [
							{
								out_rate		$HDA_ANALOG_PLAYBACK_RATE
								out_bit_depth		32
								out_valid_bit_depth	24
							}
						]
					}
					Object.Widget.dai-copier.1 {
						node_type $HDA_LINK_OUTPUT_CLASS
						stream_name $HDA_ANALOG_DAI_NAME
						dai_type "HDA"
						copier_type "HDA"
                                                num_input_audio_formats 1
                                                num_output_audio_formats 1
                                                Object.Base.input_audio_format [
                                                        {
                                                                in_rate			$HDA_ANALOG_PLAYBACK_RATE
                                                                in_bit_depth		32
                                                                in_valid_bit_depth	24
                                                        }
                                                ]
                                                Object.Base.output_audio_format [
                                                        {
                                                                out_rate		$HDA_ANALOG_PLAYBACK_RATE
                                                                out_bit_depth		32
                                                                out_valid_bit_depth	32
                                                        }
                                                ]
					}
				}
			]

			mixout-aria-gain-mixin-playback [
				{
					index 2

					Object.Widget.mixin.1 {
						num_input_audio_formats 1
						num_output_audio_formats 1
						Object.Base.input_audio_format [
							{
								in_rate			$HDA_ANALOG_PLAYBACK_RATE
								in_bit_depth		32
								in_valid_bit_depth	24
							}
						]
						Object.Base.output_audio_format [
							{
								out_rate		$HDA_ANALOG_PLAYBACK_RATE
								out_bit_depth		32
								out_valid_bit_depth	24
							}
						]
					}
					Object.Widget.gain.1 {
						num_input_audio_formats 1
						num_output_audio_formats 1
						Object.Base.input_audio_format [
							{
								in_rate			$HDA_ANALOG_PLAYBACK_RATE
								in_bit_depth		32
								in_valid_bit_depth	24
							}
						]
						Object.Base.output_audio_format [
							{
								out_rate		$HDA_ANALOG_PLAYBACK_RATE
								out_bit_depth		32
								out_valid_bit_depth	24
							}
						]
						Object.Control.mixer.1 {
							name 'Post Mixer $ANALOG_PLAYBACK_PCM Volume'
						}
					}
					Object.Widget.aria.1 {
						num_input_audio_formats 1
						num_output_audio_formats 1
						Object.Base.input_audio_format [
							{
								in_rate			$HDA_ANALOG_PLAYBACK_RATE
								in_bit_depth		32
								in_valid_bit_depth	24
							}
						]
						Object.Base.output_audio_format [
							{
								out_rate		$HDA_ANALOG_PLAYBACK_RATE
								out_bit_depth		32
								out_valid_bit_depth	24
							}
						]
						Object.Control.bytes."1" {
							name '$ANALOG_PLAYBACK_PCM ARIA bytes'
							IncludeByKey.BENCH_ARIA_PARAMS {
								"passthrough"	"include/components/aria/passthrough.conf"
								"param_1"	"include/components/aria/param_1.conf"
								"param_2"	"include/components/aria/param_2.conf"
								"param_3"	"include/components/aria/param_3.conf"
							}
						}
					}
					Object.Widget.mixout.1 {
						num_input_audio_formats 1
						num_output_audio_formats 1
						Object.Base.input_audio_format [
							{
								in_rate			$HDA_ANALOG_PLAYBACK_RATE
								in_bit_depth		32
								in_valid_bit_depth	24
							}
						]
						Object.Base.output_audio_format [
							{
								out_rate		$HDA_ANALOG_PLAYBACK_RATE
								out_bit_depth		32
								out_valid_bit_depth	24
							}
						]
					}
				}
			]

			host-copier-gain-mixin-playback [
				{
					index 1

					Object.Widget.host-copier.1 {
						stream_name $ANALOG_PLAYBACK_PCM
						pcm_id 0
						num_input_audio_formats 3
						num_output_audio_formats 1
						Object.Base.input_audio_format [
							{
								in_rate			$HDA_ANALOG_PLAYBACK_RATE
								in_bit_depth		16
								in_valid_bit_depth	16
							}
							{
								in_rate			$HDA_ANALOG_PLAYBACK_RATE
								in_bit_depth		32
								in_valid_bit_depth	24
							}
							{
								in_rate			$HDA_ANALOG_PLAYBACK_RATE
								in_bit_depth		32
								in_valid_bit_depth	32
							}
						]
						Object.Base.output_audio_format [
							{
								out_rate		$HDA_ANALOG_PLAYBACK_RATE
								out_bit_depth		32
								out_valid_bit_depth	24
							}
						]
					}

					Object.Widget.gain.1 {
						num_input_audio_formats 1
						num_output_audio_formats 1
						Object.Base.input_audio_format [
							{
								in_rate			$HDA_ANALOG_PLAYBACK_RATE
								in_bit_depth		32
								in_valid_bit_depth	24
							}
						]
						Object.Base.output_audio_format [
							{
								out_rate		$HDA_ANALOG_PLAYBACK_RATE
								out_bit_depth		32
								out_valid_bit_depth	24
							}
						]
						Object.Control.mixer.1 {
							name 'Pre Mixer $ANALOG_PLAYBACK_PCM Volume'
						}
					}
					Object.Widget.mixin.1 {
						num_input_audio_formats 1
						num_output_audio_formats 1
						Object.Base.input_audio_format [
							{
								in_rate			$HDA_ANALOG_PLAYBACK_RATE
								in_bit_depth		32
								in_valid_bit_depth	24
							}
						]
						Object.Base.output_audio_format [
							{
								out_rate		$HDA_ANALOG_PLAYBACK_RATE
								out_bit_depth		32
								out_valid_bit_depth	24
							}
						]
					}
				}
			]

			host-gateway-capture [
				{
					index	4
					Object.Widget.host-copier.1 {
						stream_name $ANALOG_CAPTURE_PCM
						pcm_id 0
						num_input_audio_formats 1
						num_output_audio_formats 3
						Object.Base.input_audio_format [
							{
								in_rate			$HDA_ANALOG_CAPTURE_RATE
								in_bit_depth		32
								in_valid_bit_depth	32
							}
						]
						Object.Base.output_audio_format [
							{
								out_rate		$HDA_ANALOG_CAPTURE_RATE
								out_bit_depth		16
								out_valid_bit_depth	16
							}
							{
								out_rate		$HDA_ANALOG_CAPTURE_RATE
								out_bit_depth		32
								out_valid_bit_depth	24
							}
							{
								out_rate		$HDA_ANALOG_CAPTURE_RATE
								out_bit_depth		32
								out_valid_bit_depth	32
							}
						]
					}
				}
			]

			highpass-capture-be [
				{
					index		5
					direction	capture

					Object.Widget.dai-copier."1" {
						dai_type	"HDA"
						type		"dai_out"
						copier_type	"HDA"
						stream_name	$HDA_ANALOG_DAI_NAME
						node_type	$HDA_LINK_INPUT_CLASS
						num_output_pins 1
						num_input_audio_formats 1
						num_output_audio_formats 1
						Object.Base.input_audio_format [
							{
								in_rate			$HDA_ANALOG_CAPTURE_RATE
								in_bit_depth		32
								in_valid_bit_depth	32
							}
						]
						Object.Base.output_audio_format [
							{
								out_rate		$HDA_ANALOG_CAPTURE_RATE
								out_bit_depth		32
								out_valid_bit_depth	32
							}
						]
					}
					Object.Widget.eqiir.1 {
						num_input_audio_formats 1
						num_output_audio_formats 1
						Object.Base.input_audio_format [
							{
								in_rate			$HDA_ANALOG_CAPTURE_RATE
								in_bit_depth		32
								in_valid_bit_depth	32
							}
						]
						Object.Base.output_audio_format [
							{
								out_rate		$HDA_ANALOG_CAPTURE_RATE
								out_bit_depth		32
								out_valid_bit_depth	32
							}
						]
						Object.Control.bytes."1" {
							name '$ANALOG_CAPTURE_PCM IIR Eq'
						}
					}
				}
			]
		}

		# top-level pipeline connections
		Object.Base.route [
			{
				sink 'dai-copier.HDA.$HDA_ANALOG_DAI_NAME.playback'
				source 'mixout.3.1'
			}
			{
				source 'mixin.2.1'
				sink 'mixout.3.1'
			}
			{
				source 'mixin.1.1'
				sink 'mixout.2.1'
			}
			{
				source 'dai-copier.HDA.$HDA_ANALOG_DAI_NAME.capture'
				sink 'eqiir.5.1'
			}
			{
				source 'eqiir.5.1'
				sink 'host-copier.0.capture'
			}
			{
				source 'host-copier.0.playback'
				sink 'gain.1.1'
			}
		]
	}

	#
	# Aria component
	#

	"aria24" {
		<include/bench/aria_s24.conf>
	}

	#
	# ASRC component
	#

	# '^' indicates the start of the string and '$' means the end of string
	# manually adding '^' and '$' for whole string precise matching

	"^asrc16$" {
		<include/bench/asrc_s16.conf>
	}

	"^asrc24$" {
		<include/bench/asrc_s24.conf>
	}

	"^asrc32$" {
		<include/bench/asrc_s32.conf>
	}

	#
	# DCblock component
	#

	"dcblock16" {
		<include/bench/dcblock_s16.conf>
	}

	"dcblock24" {
		<include/bench/dcblock_s24.conf>
	}

	"dcblock32" {
		<include/bench/dcblock_s32.conf>
	}

	#
	# DRC component
	#

	"drc16" {
		<include/bench/drc_s16.conf>
	}

	"drc24" {
		<include/bench/drc_s24.conf>
	}

	"drc32" {
		<include/bench/drc_s32.conf>
	}

	# Multiband-DRC component
	# Note: Due to alsatplg regexp match feature in IncludeByKey call it e.g. drc_multiband16
	# to not match multiband_drc16 with drc16 and get error "No variable defined
	# for BENCH_DRC_PARAMS" when building these.

	"drc_multiband16" {
		<include/bench/multiband_drc_s16.conf>
	}

	"drc_multiband24" {
		<include/bench/multiband_drc_s24.conf>
	}

	"drc_multiband32" {
		<include/bench/multiband_drc_s32.conf>
	}

	#
	# EQFIR component
	#

	"eqfir16" {
		<include/bench/eqfir_s16.conf>
	}

	"eqfir24" {
		<include/bench/eqfir_s24.conf>
	}

	"eqfir32" {
		<include/bench/eqfir_s32.conf>
	}

	#
	# EQIIR component
	#

	"eqiir16" {
		<include/bench/eqiir_s16.conf>
	}

	"eqiir24" {
		<include/bench/eqiir_s24.conf>
	}

	"eqiir32" {
		<include/bench/eqiir_s32.conf>
	}

	#
	# Gain component
	#

	"gain16" {
		<include/bench/gain_s16.conf>
	}

	"gain24" {
		<include/bench/gain_s24.conf>
	}

	"gain32" {
		<include/bench/gain_s32.conf>
	}

	#
	# IGO NR component
	#

	"igo_nr16" {
		<include/bench/igo_nr_s16.conf>
	}

	"igo_nr24" {
		<include/bench/igo_nr_s24.conf>
	}

	"igo_nr32" {
		<include/bench/igo_nr_s32.conf>
	}

	#
	# RTNR component
	#

	"rtnr16" {
		<include/bench/rtnr_s16.conf>
	}

	"rtnr24" {
		<include/bench/rtnr_s24.conf>
	}

	"rtnr32" {
		<include/bench/rtnr_s32.conf>
	}

	#
	# SRC component
	#

	"^src16$" {
		<include/bench/src_s16.conf>
	}

	"^src24$" {
		<include/bench/src_s24.conf>
	}

	"^src32$" {
		<include/bench/src_s32.conf>
	}

	#
	# src_lite component
	#

	"src_lite16" {
		<include/bench/src_lite_s16.conf>
	}

	"src_lite24" {
		<include/bench/src_lite_s24.conf>
	}

	"src_lite32" {
		<include/bench/src_lite_s32.conf>
	}

	#
	# tdfb component
	#

	"tdfb16" {
		<include/bench/tdfb_s16.conf>
	}

	"tdfb24" {
		<include/bench/tdfb_s24.conf>
	}

	"tdfb32" {
		<include/bench/tdfb_s32.conf>
	}

	#
	# template_comp component
	#

	"template_comp16" {
		<include/bench/template_comp_s16.conf>
	}

	"template_comp24" {
		<include/bench/template_comp_s24.conf>
	}

	"template_comp32" {
		<include/bench/template_comp_s32.conf>
	}

	#
	# up_down_mixer component
	#

	"up_down_mixer16" {
		<include/bench/up_down_mixer_s16.conf>
	}

	"up_down_mixer24" {
		<include/bench/up_down_mixer_s24.conf>
	}

	"up_down_mixer32" {
		<include/bench/up_down_mixer_s32.conf>
	}
}
