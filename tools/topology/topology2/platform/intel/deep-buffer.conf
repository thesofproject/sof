
Object.Pipeline.deepbuffer-playback [
	{
		index $DEEP_BUFFER_PIPELINE_ID

		Object.Widget.host-copier.1 {
			stream_name $DEEP_BUFFER_PCM_NAME
			pcm_id $DEEP_BUFFER_PCM_ID
			Object.Base.input_audio_format [
				{
					in_rate			$DEEP_BUF_JACK_RATE
					in_bit_depth		16
					in_valid_bit_depth	16
				}
				{
					in_rate			$DEEP_BUF_JACK_RATE
					in_bit_depth		32
					in_valid_bit_depth	24
				}
				{
					in_rate			$DEEP_BUF_JACK_RATE
					in_bit_depth		32
					in_valid_bit_depth	32
				}
			]
			Object.Base.output_audio_format [
				{
					out_rate		$DEEP_BUF_JACK_RATE
					out_bit_depth		32
					out_valid_bit_depth	32
				}
			]
		}

		Object.Widget.gain.1 {
			Object.Control.mixer.1 {
				name 'Pre Mixer $DEEP_BUFFER_PCM_NAME Volume'
			}
			Object.Base.input_audio_format [
				{
					in_rate			$DEEP_BUF_JACK_RATE
					in_bit_depth		32
					in_valid_bit_depth	32
				}
			]
			Object.Base.output_audio_format [
				{
					out_rate		$DEEP_BUF_JACK_RATE
					out_bit_depth		32
					out_valid_bit_depth	32
				}
			]
		}
		Object.Widget.mixin.1 {
			Object.Base.input_audio_format [
				{
					in_rate			$DEEP_BUF_JACK_RATE
					in_bit_depth            32
					in_valid_bit_depth      32
				}
			]
			Object.Base.output_audio_format [
				{
					out_rate		$DEEP_BUF_JACK_RATE
					out_bit_depth		32
					out_valid_bit_depth	32
				}
			]
		}
	}
]

Object.PCM.pcm [
	{
		name $DEEP_BUFFER_PCM_NAME
		id $DEEP_BUFFER_PCM_ID
		direction playback
		playback_compatible_d0i3 $DEEPBUFFER_D0I3_COMPATIBLE

		Object.Base.fe_dai.1 {
			name "$DEEP_BUFFER_PCM_NAME"
		}

		Object.PCM.pcm_caps.1 {
			name $DEEP_BUFFER_PCM_NAME
			formats 'S16_LE,S24_LE,S32_LE'
			# To avoid DMA spinning on a buffer we need bigger
			# buffer than the host buffer size, let's say twice as
			# big
			# (S16_LE, Stereo, 48KHz, DEEPBUFFER_FW_DMA_MS) * 2
			#
			# Note: The lower limit for the buffer size is rate
			#	dependent
			buffer_size_min "$[(((2 * $channels_min) * 48) * $DEEPBUFFER_FW_DMA_MS) * 2]"
			IncludeByKey.DEEP_BUF_JACK_RATE {
				"48000" {
					rates '48000'
				}
				"96000" {
					rates '96000'
				}
				"192000" {
					rates '192000'
				}
			}
		}
	}
]

Object.Base.route [
	{
		source  $DEEP_BUFFER_PIPELINE_SRC
		sink	$DEEP_BUFFER_PIPELINE_SINK
	}
	{
		source  host-copier.$DEEP_BUFFER_PCM_ID.playback
		sink	gain.$DEEP_BUFFER_PIPELINE_ID.1
	}
]

# Spawn another instance
IncludeByKey.DEEP_BUF_SPK {
"true"	{
		Define {
			SPEAKER_PCM_CORE_ID		0
		}

		Object.Pipeline.deepbuffer-playback [
			{
				index $DEEP_BUFFER_PIPELINE_ID_2
				core_id $SPEAKER_PCM_CORE_ID

				Object.Widget.host-copier.1 {
					stream_name $DEEP_BUFFER_PCM_NAME_2
					pcm_id $DEEP_BUFFER_PCM_ID_2
				}
				Object.Widget.gain.1 {
					Object.Control.mixer.1 {
						name 'Pre Mixer $DEEP_BUFFER_PCM_NAME_2 Volume'
					}
				}
				Object.Widget.pipeline.1 {
					core $SPEAKER_PCM_CORE_ID
				}
			}
		]

		Object.PCM.pcm [
			{
				name $DEEP_BUFFER_PCM_NAME_2
				id $DEEP_BUFFER_PCM_ID_2
				direction playback
				playback_compatible_d0i3 $DEEPBUFFER_D0I3_COMPATIBLE

				Object.Base.fe_dai.1 {
					name "$DEEP_BUFFER_PCM_NAME_2"
				}
				Object.PCM.pcm_caps.1 {
					name $DEEP_BUFFER_PCM_NAME_2
					formats 'S16_LE,S24_LE,S32_LE'
					# To avoid DMA spinning on a buffer we need bigger
					# buffer than the host buffer size, let's say twice as
					# big
					# (S16_LE, Stereo, 48KHz, DEEPBUFFER_FW_DMA_MS) * 2
					#
					# Note: The lower limit for the buffer size is rate
					#	dependent
					buffer_size_min "$[(((2 * $channels_min) * 48) * $DEEPBUFFER_FW_DMA_MS) * 2]"
				}
			}
		]

		Object.Base.route [
			{
				source  $DEEP_BUFFER_PIPELINE_SRC_2
				sink	$DEEP_BUFFER_PIPELINE_SINK_2
			}
			{
				source  host-copier.$DEEP_BUFFER_PCM_ID_2.playback
				sink	gain.$DEEP_BUFFER_PIPELINE_ID_2.1
			}
		]
	}
}
